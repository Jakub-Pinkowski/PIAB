@page "/intranet/suppliers"

@using Microsoft.AspNetCore.Components.Forms
@using BlazorApp1.Data
@using BlazorApp1.Models
@inject DatabaseService DbService

<PageTitle>Suppliers</PageTitle>

<h1>Suppliers</h1>

<!-- Table of Existing Suppliers -->
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Contact Email</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var supplier in suppliers)
        {
            <tr>
                <th scope="row">@supplier.Id</th>
                <td>@supplier.Name</td>
                <td>@supplier.ContactEmail</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => EditSupplier(supplier)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmDeleteSupplier(supplier)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Form to Add/Edit Supplier -->
<h2>@(isEditMode ? "Edit Supplier" : "Add New Supplier")</h2>

<EditForm Model="@currentSupplier" OnValidSubmit="@SaveSupplier">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="supplierName" class="form-label">Supplier Name</label>
        <InputText id="supplierName" class="form-control" @bind-Value="currentSupplier.Name" />
    </div>

    <div class="mb-3">
        <label for="supplierContactEmail" class="form-label">Contact Email</label>
        <InputText id="supplierContactEmail" class="form-control" @bind-Value="currentSupplier.ContactEmail" />
    </div>

    <button type="submit" class="btn btn-primary">@((isEditMode ? "Save Changes" : "Add Supplier"))</button>
    @if (isEditMode)
    {
        <button type="button" class="btn btn-danger ms-2" @onclick="CancelEdit">Cancel</button>
    }
</EditForm>

<!-- Delete Confirmation Modal -->
@if (showDeleteConfirmation)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the supplier: @supplierToDelete?.Name?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteSupplier">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Supplier> suppliers = new List<Supplier>();
    private Supplier currentSupplier = new Supplier();
    private Supplier? supplierToDelete;
    private bool isEditMode = false;
    private bool showDeleteConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        suppliers = await DbService.GetItemsAsync<Supplier>();
    }

    private void EditSupplier(Supplier supplier)
    {
        currentSupplier = new Supplier
        {
            Id = supplier.Id,
            Name = supplier.Name,
            ContactEmail = supplier.ContactEmail
        };
        isEditMode = true;
        StateHasChanged();
    }

    private async Task SaveSupplier()
    {
        await DbService.SaveItemAsync(currentSupplier);
        suppliers = await DbService.GetItemsAsync<Supplier>();
        currentSupplier = new Supplier();
        isEditMode = false;
    }

    private void CancelEdit()
    {
        currentSupplier = new Supplier();
        isEditMode = false;
    }

    private void ConfirmDeleteSupplier(Supplier supplier)
    {
        supplierToDelete = supplier;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        supplierToDelete = null;
        showDeleteConfirmation = false;
    }

    private async Task DeleteSupplier()
    {
        if (supplierToDelete != null)
        {
            await DbService.DeleteItemAsync(supplierToDelete);
            suppliers = await DbService.GetItemsAsync<Supplier>();
            supplierToDelete = null;
            showDeleteConfirmation = false;
        }
    }
}